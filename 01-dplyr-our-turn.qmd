---
title: "Data transformation with dplyr"
format:
  html:
    embed-resources: true
    toc: true
execute:
  warning: false
editor_options: 
  chunk_output_type: console
editor: visual
---

```{r}
library(readr)
library(dplyr)
```

## Import

In this exercise we use data of the UNICEF/WHO Joint Monitoring Programme (JMP) for Water Supply, Sanitation and Hygiene (WASH). The data is available at <https://washdata.org/data> and published as an R data package at <https://github.com/WASHNote/jmpwashdata/>.

The data set is available in the `data` folder as a CSV file named `jmp_wld_sanitation_long.csv`.

The data set contains the following variables:

-   `name`: country name
-   `iso3`: ISO3 country code
-   `year`: year of observation
-   `region_sdg`: SDG region
-   `residence`: residence type (national, rural, urban)
-   `varname_short`: short variable name (JMP naming convention)
-   `varname_long`: long variable name (JMP naming convention)

We use the `read_csv()` function to import the data set into R.

```{r}
sanitation <- read_csv("data/jmp_wld_sanitation_long.csv")

```

## Explore

```{r}

```

## Transform with dplyr

The `dplyr` R Package aims to provide a function for each basic verb of data manipulation. These verbs can be organised into three categories based on the component of the dataset that they work with:

-   Rows
-   Columns
-   Groups of rows

### filter()

The function `filter()` chooses rows based on column values. To use filtering effectively, you have to know how to select the observations that you want using the comparison operators. R provides the standard suite: \>, \>=, \<, \<=, != (not equal), and == (equal).

```{r}


```

-   Keyboard shortcut for vertical bar \| (OR) in US/CH is: Shift + / (Windows) and Option + / (Mac)
-   Keyboard shortcut for vertical bar \| (OR) in UK: It's complitcated
-   Keyboard shortcut for pipe operator: Ctrl / Cmd + Shift + M
-   Keyboard shortcut for assignment operator: Alt + -

**Storing a resulting data frame as a new object**

```{r}

```

### arrange()

The function `arrange()` changes the order of the rows.

```{r}

```

### select()

The `select()` function chooses columns based on their names.

```{r}

```

### rename()

The `rename()` function changes the names of variables.

```{r}

```

### mutate()

The `mutate()` function adds new variables based on existing variables or external data.

```{r}

```

### relocate()

```{r}

```

### summarise()

The `summarise()` function reduces multiple values down to a single summary.

```{r}


```

### group_by()

The `group_by()` function is used to group the data by one or more variables.

```{r}


```

### count()

The `count()` function is a convenient wrapper for `group_by()` and `summarise(n = n())`. You can prepare frequency tables with `count()`.

```{r}


```

## Communicate

-   Let's render
